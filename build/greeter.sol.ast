PragmaDirective
   Source: "pragma solidity ^0.4.0;"
ContractDefinition "mortal"
   Source: "contract mortal {\n    address creator;\n\n    function mortal(){ \n        creator = msg.sender; \n    }\n\n    function kill(){ \n        if (msg.sender == creator) suicide(creator);  \n    }\n}"
  VariableDeclaration "creator"
     Type: address
     Source: "address creator"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "mortal" - public
     Source: "function mortal(){ \n        creator = msg.sender; \n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{ \n        creator = msg.sender; \n    }"
      ExpressionStatement
         Source: "creator = msg.sender"
        Assignment using operator =
           Type: address
           Source: "creator = msg.sender"
          Identifier creator
             Type: address
             Source: "creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "kill" - public
     Source: "function kill(){ \n        if (msg.sender == creator) suicide(creator);  \n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{ \n        if (msg.sender == creator) suicide(creator);  \n    }"
      IfStatement
         Source: "if (msg.sender == creator) suicide(creator)"
        BinaryOperation using operator ==
           Type: bool
           Source: "msg.sender == creator"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier creator
             Type: address
             Source: "creator"
        ExpressionStatement
           Source: "suicide(creator)"
          FunctionCall
             Type: tuple()
             Source: "suicide(creator)"
            Identifier suicide
               Type: function (address)
               Source: "suicide"
            Identifier creator
               Type: address
               Source: "creator"
ContractDefinition "greeter"
   Source: "contract greeter is mortal{\n    string greeting;\n\n    function greeter(string _greeting) public {\n        greeting = _greeting;\n    }\n\n    function greet() constant returns (string){\n        return greeting;\n    }\n\n    //function writeMessage(string _newmessage){\n    //    message = _newmessage;\n    //}\n}"
  InheritanceSpecifier
     Source: "mortal"
    UserDefinedTypeName "mortal"
       Source: "mortal"
  VariableDeclaration "greeting"
     Type: string storage ref
     Source: "string greeting"
    ElementaryTypeName string
       Source: "string"
  FunctionDefinition "greeter" - public
     Source: "function greeter(string _greeting) public {\n        greeting = _greeting;\n    }"
    ParameterList
       Source: "(string _greeting)"
      VariableDeclaration "_greeting"
         Type: string memory
         Source: "string _greeting"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n        greeting = _greeting;\n    }"
      ExpressionStatement
         Source: "greeting = _greeting"
        Assignment using operator =
           Type: string storage ref
           Source: "greeting = _greeting"
          Identifier greeting
             Type: string storage ref
             Source: "greeting"
          Identifier _greeting
             Type: string memory
             Source: "_greeting"
  FunctionDefinition "greet" - public - const
     Source: "function greet() constant returns (string){\n        return greeting;\n    }"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\n        return greeting;\n    }"
      Return
         Source: "return greeting"
        Identifier greeting
           Type: string storage ref
           Source: "greeting"
